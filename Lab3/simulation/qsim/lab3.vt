// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/11/2025 14:40:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    c2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module c2_vlg_sample_tst(
	clk_50,
	clr,
	sampler_tx
);
input  clk_50;
input  clr;
output sampler_tx;

reg sample;
time current_time;
always @(clk_50 or clr)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module c2_vlg_check_tst (
	HEX0,
	greenEW,
	greenNS,
	out,
	redEW,
	redNS,
	yellowEW,
	yellowNS,
	sampler_rx
);
input [6:0] HEX0;
input  greenEW;
input  greenNS;
input [2:0] out;
input  redEW;
input  redNS;
input  yellowEW;
input  yellowNS;
input sampler_rx;

reg [6:0] HEX0_expected;
reg  greenEW_expected;
reg  greenNS_expected;
reg [2:0] out_expected;
reg  redEW_expected;
reg  redNS_expected;
reg  yellowEW_expected;
reg  yellowNS_expected;

reg [6:0] HEX0_prev;
reg  greenEW_prev;
reg  greenNS_prev;
reg [2:0] out_prev;
reg  redEW_prev;
reg  redNS_prev;
reg  yellowEW_prev;
reg  yellowNS_prev;

reg [6:0] HEX0_expected_prev;
reg  greenEW_expected_prev;
reg  greenNS_expected_prev;
reg [2:0] out_expected_prev;
reg  redEW_expected_prev;
reg  redNS_expected_prev;
reg  yellowEW_expected_prev;
reg  yellowNS_expected_prev;

reg [6:0] last_HEX0_exp;
reg  last_greenEW_exp;
reg  last_greenNS_exp;
reg [2:0] last_out_exp;
reg  last_redEW_exp;
reg  last_redNS_exp;
reg  last_yellowEW_exp;
reg  last_yellowNS_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX0_prev = HEX0;
	greenEW_prev = greenEW;
	greenNS_prev = greenNS;
	out_prev = out;
	redEW_prev = redEW;
	redNS_prev = redNS;
	yellowEW_prev = yellowEW;
	yellowNS_prev = yellowNS;
end

// update expected /o prevs

always @(trigger)
begin
	HEX0_expected_prev = HEX0_expected;
	greenEW_expected_prev = greenEW_expected;
	greenNS_expected_prev = greenNS_expected;
	out_expected_prev = out_expected;
	redEW_expected_prev = redEW_expected;
	redNS_expected_prev = redNS_expected;
	yellowEW_expected_prev = yellowEW_expected;
	yellowNS_expected_prev = yellowNS_expected;
end


// expected HEX0[ 6 ]
initial
begin
	HEX0_expected[6] = 1'bX;
end 
// expected HEX0[ 5 ]
initial
begin
	HEX0_expected[5] = 1'bX;
end 
// expected HEX0[ 4 ]
initial
begin
	HEX0_expected[4] = 1'bX;
end 
// expected HEX0[ 3 ]
initial
begin
	HEX0_expected[3] = 1'bX;
end 
// expected HEX0[ 2 ]
initial
begin
	HEX0_expected[2] = 1'bX;
end 
// expected HEX0[ 1 ]
initial
begin
	HEX0_expected[1] = 1'bX;
end 
// expected HEX0[ 0 ]
initial
begin
	HEX0_expected[0] = 1'bX;
end 

// expected greenEW
initial
begin
	greenEW_expected = 1'bX;
end 

// expected greenNS
initial
begin
	greenNS_expected = 1'bX;
end 

// expected redEW
initial
begin
	redEW_expected = 1'bX;
end 

// expected redNS
initial
begin
	redNS_expected = 1'bX;
end 

// expected yellowEW
initial
begin
	yellowEW_expected = 1'bX;
end 

// expected yellowNS
initial
begin
	yellowNS_expected = 1'bX;
end 
// expected out[ 2 ]
initial
begin
	out_expected[2] = 1'bX;
end 
// expected out[ 1 ]
initial
begin
	out_expected[1] = 1'bX;
end 
// expected out[ 0 ]
initial
begin
	out_expected[0] = 1'bX;
end 
// generate trigger
always @(HEX0_expected or HEX0 or greenEW_expected or greenEW or greenNS_expected or greenNS or out_expected or out or redEW_expected or redEW or redNS_expected or redNS or yellowEW_expected or yellowEW or yellowNS_expected or yellowNS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX0 = %b | expected greenEW = %b | expected greenNS = %b | expected out = %b | expected redEW = %b | expected redNS = %b | expected yellowEW = %b | expected yellowNS = %b | ",HEX0_expected_prev,greenEW_expected_prev,greenNS_expected_prev,out_expected_prev,redEW_expected_prev,redNS_expected_prev,yellowEW_expected_prev,yellowNS_expected_prev);
	$display("| real HEX0 = %b | real greenEW = %b | real greenNS = %b | real out = %b | real redEW = %b | real redNS = %b | real yellowEW = %b | real yellowNS = %b | ",HEX0_prev,greenEW_prev,greenNS_prev,out_prev,redEW_prev,redNS_prev,yellowEW_prev,yellowNS_prev);
`endif
	if (
		( HEX0_expected_prev[0] !== 1'bx ) && ( HEX0_prev[0] !== HEX0_expected_prev[0] )
		&& ((HEX0_expected_prev[0] !== last_HEX0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[0] = HEX0_expected_prev[0];
	end
	if (
		( HEX0_expected_prev[1] !== 1'bx ) && ( HEX0_prev[1] !== HEX0_expected_prev[1] )
		&& ((HEX0_expected_prev[1] !== last_HEX0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[1] = HEX0_expected_prev[1];
	end
	if (
		( HEX0_expected_prev[2] !== 1'bx ) && ( HEX0_prev[2] !== HEX0_expected_prev[2] )
		&& ((HEX0_expected_prev[2] !== last_HEX0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[2] = HEX0_expected_prev[2];
	end
	if (
		( HEX0_expected_prev[3] !== 1'bx ) && ( HEX0_prev[3] !== HEX0_expected_prev[3] )
		&& ((HEX0_expected_prev[3] !== last_HEX0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[3] = HEX0_expected_prev[3];
	end
	if (
		( HEX0_expected_prev[4] !== 1'bx ) && ( HEX0_prev[4] !== HEX0_expected_prev[4] )
		&& ((HEX0_expected_prev[4] !== last_HEX0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[4] = HEX0_expected_prev[4];
	end
	if (
		( HEX0_expected_prev[5] !== 1'bx ) && ( HEX0_prev[5] !== HEX0_expected_prev[5] )
		&& ((HEX0_expected_prev[5] !== last_HEX0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[5] = HEX0_expected_prev[5];
	end
	if (
		( HEX0_expected_prev[6] !== 1'bx ) && ( HEX0_prev[6] !== HEX0_expected_prev[6] )
		&& ((HEX0_expected_prev[6] !== last_HEX0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[6] = HEX0_expected_prev[6];
	end
	if (
		( greenEW_expected_prev !== 1'bx ) && ( greenEW_prev !== greenEW_expected_prev )
		&& ((greenEW_expected_prev !== last_greenEW_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port greenEW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", greenEW_expected_prev);
		$display ("     Real value = %b", greenEW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_greenEW_exp = greenEW_expected_prev;
	end
	if (
		( greenNS_expected_prev !== 1'bx ) && ( greenNS_prev !== greenNS_expected_prev )
		&& ((greenNS_expected_prev !== last_greenNS_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port greenNS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", greenNS_expected_prev);
		$display ("     Real value = %b", greenNS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_greenNS_exp = greenNS_expected_prev;
	end
	if (
		( out_expected_prev[0] !== 1'bx ) && ( out_prev[0] !== out_expected_prev[0] )
		&& ((out_expected_prev[0] !== last_out_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[0] = out_expected_prev[0];
	end
	if (
		( out_expected_prev[1] !== 1'bx ) && ( out_prev[1] !== out_expected_prev[1] )
		&& ((out_expected_prev[1] !== last_out_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[1] = out_expected_prev[1];
	end
	if (
		( out_expected_prev[2] !== 1'bx ) && ( out_prev[2] !== out_expected_prev[2] )
		&& ((out_expected_prev[2] !== last_out_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_exp[2] = out_expected_prev[2];
	end
	if (
		( redEW_expected_prev !== 1'bx ) && ( redEW_prev !== redEW_expected_prev )
		&& ((redEW_expected_prev !== last_redEW_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port redEW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", redEW_expected_prev);
		$display ("     Real value = %b", redEW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_redEW_exp = redEW_expected_prev;
	end
	if (
		( redNS_expected_prev !== 1'bx ) && ( redNS_prev !== redNS_expected_prev )
		&& ((redNS_expected_prev !== last_redNS_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port redNS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", redNS_expected_prev);
		$display ("     Real value = %b", redNS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_redNS_exp = redNS_expected_prev;
	end
	if (
		( yellowEW_expected_prev !== 1'bx ) && ( yellowEW_prev !== yellowEW_expected_prev )
		&& ((yellowEW_expected_prev !== last_yellowEW_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yellowEW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yellowEW_expected_prev);
		$display ("     Real value = %b", yellowEW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_yellowEW_exp = yellowEW_expected_prev;
	end
	if (
		( yellowNS_expected_prev !== 1'bx ) && ( yellowNS_prev !== yellowNS_expected_prev )
		&& ((yellowNS_expected_prev !== last_yellowNS_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yellowNS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yellowNS_expected_prev);
		$display ("     Real value = %b", yellowNS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_yellowNS_exp = yellowNS_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module c2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_50;
reg clr;
// wires                                               
wire [6:0] HEX0;
wire greenEW;
wire greenNS;
wire [2:0] out;
wire redEW;
wire redNS;
wire yellowEW;
wire yellowNS;

wire sampler;                             

// assign statements (if any)                          
c2 i1 (
// port map - connection between master ports and signals/registers   
	.HEX0(HEX0),
	.clk_50(clk_50),
	.clr(clr),
	.greenEW(greenEW),
	.greenNS(greenNS),
	.out(out),
	.redEW(redEW),
	.redNS(redNS),
	.yellowEW(yellowEW),
	.yellowNS(yellowNS)
);

// clk_50
always
begin
	clk_50 = 1'b0;
	clk_50 = #20000 1'b1;
	#20000;
end 

// clr
initial
begin
	clr = 1'b0;
	clr = #60000 1'b1;
end 

c2_vlg_sample_tst tb_sample (
	.clk_50(clk_50),
	.clr(clr),
	.sampler_tx(sampler)
);

c2_vlg_check_tst tb_out(
	.HEX0(HEX0),
	.greenEW(greenEW),
	.greenNS(greenNS),
	.out(out),
	.redEW(redEW),
	.redNS(redNS),
	.yellowEW(yellowEW),
	.yellowNS(yellowNS),
	.sampler_rx(sampler)
);
endmodule

